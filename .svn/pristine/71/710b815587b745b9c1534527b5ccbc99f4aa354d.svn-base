//package jpp.festivalPlanner.util;
//
//import java.time.format.DateTimeParseException;
//
//import java.util.ArrayList;
//import java.util.Collection;
//import java.util.Collections;
//import java.util.Comparator;
//import java.util.List;
//
//import jpp.festivalPlanner.base.Performer;
//import jpp.festivalPlanner.comparators.TimeComparator;
//
//public class Selector {
//
//	public static List<Performer> selectNonOverlapping(Comparator<Performer> comp, Collection<Performer> col) {
//		List<Performer> bandList = new ArrayList<Performer>();
//		for (Performer a : col) {
//			bandList.add(a);
//		}
//
//		List<Performer> resultList = new ArrayList<Performer>();
//		if (!bandList.isEmpty()) {
//			Collections.sort(bandList, comp);
//			Performer p = bandList.get(0);
//			bandList.remove(0);
//			resultList.add(p);
//		}
//		while (!bandList.isEmpty()) {
//			Collections.sort(bandList, comp);
//			Performer h = bandList.get(0);
//			bandList.remove(0);
//			for (Performer item : resultList) {
//				if (item.getEnd().isEqual(h.getStart()) || item.getStart().isEqual(h.getEnd())
//						|| item.getStart().isAfter(h.getEnd()) || item.getEnd().isBefore(h.getStart())) {
//					resultList.add(h);
//				}
//			}
//
//		}
//
//		resultList.sort(new Comp1());
//		return resultList;
//	}
//
//}

// ********************************************

package jpp.festivalPlanner.util;

import java.util.*;
import jpp.festivalPlanner.base.Performer;
import jpp.festivalPlanner.comparators.TimeComparator;

public class Selector {

	public static boolean checkoverlapping(List<Performer> list1, Performer per1) {
		boolean firstTime = true;
		for (Performer a : list1)
			if (a.getEnd().isEqual(per1.getStart()) || a.getStart().isEqual(per1.getEnd())
					|| a.getStart().isAfter(per1.getEnd()) || a.getEnd().isBefore(per1.getStart())) {
				firstTime = firstTime && true;
			} else
				firstTime = firstTime && false;
		return firstTime;
	}

	public static List<Performer> selectNonOverlapping(Comparator<Performer> comp, Collection<Performer> col) {
		List<Performer> bandList = new ArrayList<Performer>(col);

		List<Performer> resultList = new ArrayList<Performer>();
		if (!bandList.isEmpty()) {
			Collections.sort(bandList, comp);
			Performer p = bandList.get(0);
			resultList.add(p);
			bandList.remove(0);

		}
		while (!bandList.isEmpty()) {
			Collections.sort(bandList, comp);
			Performer p1 = bandList.get(0);
			bandList.remove(0);
			if (checkoverlapping(resultList, p1)) {
				resultList.add(p1);
			}
		}
		resultList.sort(new Comp1());

		return resultList;
	}
}
